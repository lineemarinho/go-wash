{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { tap } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@ionic/storage\";\nlet AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, storage) {\n      this.http = http;\n      this.storage = storage;\n      this.apiSign = `${environment.apiUrl}/api/user`;\n      this.apiMyAddress = `${environment.apiUrl}/api/auth/address`;\n      this.apiLogin = `${environment.apiUrl}/api/login`;\n      this.myData = `${environment.apiUrl}/api/auth`;\n      this.myAddress = `${environment.apiUrl}/api/auth/`;\n      this.myVehicles = `${environment.apiUrl}/api/auth/`;\n      this.apiMyVehicle = `${environment.apiUrl}/api/auth/vehicle`;\n      this.upMyVehicle = `${environment.apiUrl}/api/auth/vehicle`;\n      this.apiGoogle = `${environment.apiUrl}/api/login/google`;\n      this.password = `${environment.apiUrl}/api/forgot-password`;\n      this.apiPassword = `${environment.apiUrl}/api/auth/change-password`;\n      this.apiCep = `${environment.apiUrl}/api/auth/via-cep`;\n      this.baseUrl = `${environment.apiUrl}/api/auth/address`;\n      this.apiLogout = `${environment.apiUrl}/api/auth/logout`;\n      this.userStorageKey = 'user';\n      this.storage.create();\n      this.storage.get('user').then(userData => {\n        this.user = userData;\n        this.authToken = this.user.access_token;\n      });\n    }\n    login(email, password) {\n      const requestBody = {\n        email: email,\n        password: password\n      };\n      return this.http.post(this.apiLogin, requestBody).pipe(tap(user => {\n        console.log(user);\n        this.storage.set('user', user);\n      }));\n    }\n    logout() {\n      const headers = new HttpHeaders().set('Authorization', `Bearer ${this.authToken}`);\n      return this.http.post(this.apiLogout, {\n        headers\n      });\n    }\n    loginGoogle() {\n      return this.http.get(`${this.apiGoogle}`);\n    }\n    searchCep(cep) {\n      const headers = new HttpHeaders().set('Authorization', `Bearer ${this.authToken}`);\n      return this.http.get(`${this.apiCep}/${cep}`, {\n        headers\n      });\n    }\n    getUserProfile(userId, token) {\n      const headers = new HttpHeaders({\n        Authorization: `Bearer ${token}`\n      });\n      return this.http.get(`${this.myData}/user/${userId}`, {\n        headers\n      });\n    }\n    delete(userData) {\n      const headers = new HttpHeaders().set('Authorization', `Bearer ${this.authToken}`);\n      return this.http.delete(`${this.baseUrl}/${userData}`, {\n        headers\n      });\n    }\n    signup(userData) {\n      return this.http.post(this.apiSign, userData);\n    }\n    forgotPassword(userData) {\n      const requestBody = {\n        email: userData\n      };\n      return this.http.post(this.password, requestBody);\n    }\n    upPassword(requestData) {\n      const headers = new HttpHeaders().set('Authorization', `Bearer ${this.authToken}`);\n      return this.http.post(this.apiPassword, requestData, {\n        headers\n      });\n    }\n    profile(userId) {\n      const headers = new HttpHeaders().set('Authorization', `Bearer ${this.authToken}`);\n      const url = `${this.myData}/user/${userId}`;\n      return this.http.get(url, {\n        headers\n      });\n    }\n    createAddress(data) {\n      const headers = new HttpHeaders().set('Authorization', `Bearer ${this.authToken}`);\n      return this.http.post(this.apiMyAddress, data, {\n        headers\n      });\n    }\n    addVehicle(data) {\n      const headers = new HttpHeaders().set('Authorization', `Bearer ${this.authToken}`);\n      return this.http.post(this.apiMyVehicle, data, {\n        headers\n      });\n    }\n    upVehicle(data) {\n      const headers = new HttpHeaders().set('Authorization', `Bearer ${this.authToken}`);\n      const url = `${this.upMyVehicle}/${data.id}`;\n      return this.http.post(url, data, {\n        headers\n      });\n    }\n    allAddress() {\n      const headers = new HttpHeaders().set('Authorization', `Bearer ${this.authToken}`);\n      const url = `${this.myAddress}address`;\n      return this.http.get(url, {\n        headers\n      });\n    }\n    allVehicles() {\n      const headers = new HttpHeaders().set('Authorization', `Bearer ${this.authToken}`);\n      const url = `${this.myVehicles}vehicle`;\n      return this.http.get(url, {\n        headers\n      });\n    }\n    saveUserDetailsToStorage(userDetails) {\n      localStorage.setItem('userDetails', JSON.stringify(userDetails));\n    }\n  }\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Storage));\n  };\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();\nexport { AuthService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}